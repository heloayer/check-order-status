// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/heloayer/check-order-status/internal/resources/http/handler/dto"
	mock "github.com/stretchr/testify/mock"

	models "github.com/heloayer/check-order-status/internal/models"
)

// Order is an autogenerated mock type for the Order type
type Order struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: ctx, request, provider
func (_m *Order) CreateOrder(ctx context.Context, request dto.OrderRequest, provider string) error {
	ret := _m.Called(ctx, request, provider)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrder")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.OrderRequest, string) error); ok {
		r0 = rf(ctx, request, provider)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetOrderByID provides a mock function with given fields: ctx, id
func (_m *Order) GetOrderByID(ctx context.Context, id string) (models.Order, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetOrderByID")
	}

	var r0 models.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (models.Order, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) models.Order); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(models.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOrder creates a new instance of Order. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOrder(t interface {
	mock.TestingT
	Cleanup(func())
}) *Order {
	mock := &Order{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
